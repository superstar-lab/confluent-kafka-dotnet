<API>


<Member name="Poll">
    <summary>
        Poll for callback events. You will not typically need
        to call this method. Only call on producer
        instances where background polling is not enabled.
        Blocks until there is a callback event ready to be served.
    </summary>
    <returns>
        Returns the number of events served.
    </returns>
</Member>

<Member name="Poll_TimeSpan">
    <summary>
        Poll for callback events. You will not typically need
        to call this method. Only call on producer instances 
        where background polling is not enabled.
    </summary>
    <param name="timeout">
        The maximum period of time to block if no callback events
        are waiting. You should typically use a relatively short 
        timout period because this operation cannot be cancelled.
    </param>
    <returns>
        Returns the number of events served.
    </returns>
</Member>

<Member name="Poll_int">
    <summary>
        Poll for callback events. You will not typically need
        to call this method. Only call on producer instances 
        where background polling is not enabled.
    </summary>
    <param name="millisecondsTimeout">
        The maximum period of time to block (in milliseconds) if no
        callback events are waiting or -1 to block indefinitely. 
        You should typically use a relatively short timout period 
        because this operation cannot be cancelled.
    </param>
    <returns>
        Returns the number of events served.
    </returns>
</Member>



<Member name="Flush_int">

</Member>

<Member name="Flush_TimeSpan">

</Member>

<Member name="Flush">

</Member>

<Member name="Dispose">

</Member>


<Member name="ProduceAsync_Common">
    <returns>
        A Task which will complete with the corresponding delivery report
        for this request.
    </returns>
    <remarks>
        If you require strict ordering of delivery reports to be maintained,
        you should use the Produce method which provides these via a callback
        on a single poll thread. The Tasks returned by ProduceAsync are 
        completed on arbitrary thread pool threads and so they can be executed
        out of order.
    </remarks>
</Member>

<Member name="ProduceAsync_string_Message">
    <summary>
        Asynchronously send a single message to a Kafka topic.
        The partition the message is sent to is determined using
        the partitioner defined using the 'partitioner' 
        configuration property.
    </summary>
    <param name="topic">
        The topic to produce the message to.
    </param>
    <param name="message">
        The message to produce.
    </param>
</Member>

<Member name="ProduceAsync_TopicPartition_Message">
    <summary>
        Asynchronously send a single message to a Kafka topic.
    </summary>
    <param name="topicPartition">
        The topic/partition to produce the message to.
    </param>
    <param name="message">
        The message to produce.
    </param>
</Member>

<Member name="ProduceAsync_string_Partition_byte_int_int_byte_int_int_Timestamp_IEnumerable">
    <summary>
        Asynchronously send a single message to a Kafka topic.
    </summary>
    <param name="topic">
        The topic to produce the message to.
    </param>
    <param name="partition">
        The partition to produce the message to. If Partition.Any,
        a partitioner specified via the 'partitioner' configuration property
        will be used to determine the partition the message is sent to.
    </param>
    <param name="key">
        A byte array from which to extract the message key (possibly null).
    </param>
    <param name="keyOffset">
        The start offset of the message key in the <paramref name="key" /> 
        byte array parameter. If <paramref name="key" /> is set to null, then 
        keyOffset must be set to 0.
    </param>
    <param name="keyLength">
        The number of bytes to extract from the <paramref name="key" /> parmeter
        to use as the message key. If <paramref name="key" /> is set to null,
        then keyLength must be set to 0.
    </param>
    <param name="val">
        The message value (possibly null).
    </param>
    <param name="valOffset">
        The start offset of the message value in the <paramref name="val" /> 
        byte array parameter. If <paramref name="val" /> is set to null, then 
        valOffset must be set to 0.
    </param>
    <param name="valLength">
        The number of bytes to extract from the <paramref name="val" /> parmeter
        to use as the message value. If <paramref name="val" /> is set to null,
        then valLength must be set to 0.
    </param>
    <param name="timestamp">
        The message timestamp. The timestamp type must be set to CreateTime. 
        Specify Timestamp.Default to set the message timestamp to the time
        of this function call.
    </param>
    <param name="headers">
        The collection of message headers (or null). Specifying null or an 
        empty list are equivalent. The order of headers is maintained, and
        duplicate header keys are allowed.
    </param>
</Member>

<Member name="Produce_Action">
    <param name="deliveryHandler">
        The Action&lt;Message&gt; instance to used to receive delivery report 
        notifications.
    </param>
    <remarks>
        Use a Produce method variant rather than ProduceAsync if you require 
        notification of delivery reports strictly in the order they were 
        acknowledged by the broker / failed (failure may be via broker or 
        local). deliveryHandler callbacks are executed on the Poll thread.
    </remarks>
</Member>

</API>
